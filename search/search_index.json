{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Speed Sleuth \ud83d\udd75\ufe0f","text":"<p>Automated speedtest analyser using selenium and a compatible browser.</p>"},{"location":"#compatibility-matrix","title":"Compatibility matrix","text":"Operating System Windows N/A macOS Linux N/A <ul> <li> - tested, works fine</li> <li> - not for production use</li> <li> - will work in the future (help out if you can)</li> <li> - maybe works, not tested</li> <li> no support planned</li> </ul>"},{"location":"#supported-provider","title":"Supported provider","text":"Provider Supported ? Speedtest.net Speedof.me fast.com Google Fiber Speed Test TestMy.net <ul> <li> - tested, works fine</li> <li> - will work in the future (help out if you can)</li> </ul> <p>Focusing here on the top 5 most used providers. But other might be integrated. Feel free to add new ones.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python3 and <code>hatch</code> https://hatch.pypa.io/latest/</li> <li>A browser supported by the selenium framework (currently only Chromium and Edge implemented)</li> </ul>"},{"location":"#how-to-run","title":"How to run","text":"<p>You can test against different providers:</p> <pre><code>hatch env run speed-sleuth -- &lt;providers ...&gt;\n</code></pre> <p>To test against speedtest.net:</p> <pre><code>hatch env run speed-sleuth -- speedtest\n</code></pre> <p>To test against multiple providers, for example speedtest.net and speedof.me (one test at a time)</p> <pre><code>hatch env run speed-sleuth -- speedtest speedofme\n</code></pre> <p>If running with hatch it's better to escape hatch arguments from the program arguments using <code>--</code>.</p> <p>You can get help using:</p> <pre><code>hatch env run speed-sleuth -- --help\n</code></pre>"},{"location":"#some-notes","title":"Some notes","text":"<p>Install editable dependencies: https://setuptools.pypa.io/en/latest/userguide/development_mode.html</p> <pre><code>hatch -e default shell\npython -m pip install --editable .\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>I started to write a bunch of unit tests because running the full test suite using a real browser doing a real test is quite long and painful. The goal is the achieve the best coverage using unit tests.</p> <p>If for any reason, one of the provider decide to change the design or the css class to activate the test, we are fucked.</p> <p>That's why this is still important to run the integration tests against the real providers on a regular basis. For now this is not the case. The plan is to have a test that will be activate each night with a cron that will run the full integration test suite.</p>"},{"location":"#some-examples","title":"Some examples","text":"<p>Launch unit tests:</p> <pre><code>hatch run test:run -- -k unit\n</code></pre> <p>Launch the integration tests:</p> <pre><code>hatch run test:run -- -k integration\n</code></pre> <p>If you want to run the full test suite:</p> <pre><code>hatch run test:run\n</code></pre> <p>Note: be aware that running the full test suite requires a supported browser installed on your machine.</p>"},{"location":"#todo","title":"TODO","text":"<ul> <li>Add support for multiple browsers (see compatibility matrix).</li> <li>Instead of taking pictures of the results, parse the DOM to retrieve results.</li> <li>Achieve the best coverage possible.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Hello fellow contributors!</p> <p>First off, thank you for considering contributing to my awesome little project :-) Seeing new faces and fresh ideas is always appreciated. However, just like any well-maintained project, I've got a few guidelines to keep everything neat and tidy:</p> <ul> <li> <p>No tests, no entry: I love my tests just like a chef love its spices. So, if you're sending in a PR without tests, it's like serving a bland dish. I'll have to kindly ask you to spice it up or it will go straight to the reject pile. You can get some inspiration from the <code>tests/unit</code> and <code>tests/integration</code> folders.</p> </li> <li> <p>Code, meet Documentation. Documentation, meet Code: Your code should come with its own documentation.</p> </li> <li> <p>Expertise required: Just as I imagine you wouldn't trust your grandmother to perform heart surgery (no offense, Grandma), I would prefer that only experts edit the documentation. So unless proven, leave it to the pros.</p> </li> <li> <p>Typos: The bane of every programmers' existence. While I appreciate your sense of observation, I've got automated typo correction software that's faster than you and me. So unless you have discovered a typo that reaches your sensibilities and causes havoc, I'll have to close those PRs faster than you can say \"spellcheck.\"</p> </li> <li> <p>Keep it \"simple\": If your PR looks \"complex\", is a big diff, changing a lot of stuff, it won't be review or merged. Consider breaking it into smaller PRs.</p> </li> </ul> <p>Don't go away! These guidelines aren't meant to scare you off \u2013 quite the opposite! I'm convinced this project can be very useful, so let's work together and make this project a nice tool for automation and network engineers (with documentation, of course).</p>"},{"location":"browser/browser/","title":"Documentation for the browser module","text":"<p>Browser is the module handling the different browser logic and their implementation in order to be used with selenium.</p>"},{"location":"browser/browser/#speed_sleuth.browser.BrowserFactory","title":"<code>BrowserFactory</code>","text":"<p>Factory class to create browser instances based on the user's default browser.</p> <p>This class is designed to abstract the process of detecting the default web browser on the user's system and instantiating a corresponding browser object that can be used within the application.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>class BrowserFactory:\n    \"\"\"Factory class to create browser instances based on the user's default\n    browser.\n\n    This class is designed to abstract the process of detecting the\n    default web browser on the user's system and instantiating a\n    corresponding browser object that can be used within the\n    application.\n\n    \"\"\"\n\n    @staticmethod\n    def get_browser() -&gt; BrowserInterface:\n        \"\"\"Retrieves an instance of a browser object based on the user's\n        default browser.\n\n        The method first detects the default browser and its executable\n        path by calling the `detect_default_browser` static method.\n        Depending on the detected browser, it then dynamically imports\n        and returns an instance of the corresponding browser class.\n\n        Returns:\n            browser: An instance of a browser object corresponding to\n                the user's default browser and conforming to BrowserInterface.\n\n        Raises:\n            ValueError: If the detected default browser is not supported by the\n                factory.\n\n        \"\"\"\n        default_browser, path = BrowserFactory.detect_default_browser()\n\n        match default_browser:\n            case \"MSEdgeHTM\":\n                from speed_sleuth.browser.ms_edge import MSEdgeBrowser\n\n                return MSEdgeBrowser(path)\n            case \"google-chrome\":\n                from speed_sleuth.browser.chromium import ChromiumBrowser\n\n                return ChromiumBrowser(path)\n            case _:\n                raise ValueError(\n                    f\"No supported browser found for {default_browser}\"\n                )\n\n    @staticmethod\n    def detect_default_browser() -&gt; tuple[str, str]:\n        \"\"\"Detects the user's default web browser and its executable path.\n\n        This method attempts to identify the default browser set on the\n        user's system. It utilizes the platform module to determine the\n        operating system and then uses OS-specific methods to find the\n        default browser and its path. For Windows, it accesses the\n        system registry.\n\n        Returns:\n            tuple: A tuple containing the identifier of the default browser and\n                its executable path.\n\n        Raises:\n            OsNotFoundException: If the operating system is not recognized or\n                supported by this method.\n\n        \"\"\"\n        # selenium is able to cope without.\n        os_platform = platform.system().lower()\n\n        match os_platform:\n            case \"windows\":  # TODO FIX THIS MESS and use webbrowser\n                browser = \"\"\n                path = None\n                try:\n                    from winreg import (\n                        HKEY_CLASSES_ROOT,\n                        HKEY_CURRENT_USER,\n                        OpenKey,\n                        QueryValueEx,\n                    )\n\n                    reg_key = OpenKey(\n                        HKEY_CURRENT_USER,\n                        r\"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\",  # noqa: E501\n                    )\n                    browser = QueryValueEx(reg_key, \"ProgId\")[0]\n\n                    reg_key = OpenKey(\n                        HKEY_CLASSES_ROOT,\n                        r\"{}\\shell\\open\\command\".format(browser),\n                    )\n                    browser_path_tuple = QueryValueEx(reg_key, None)\n                    path = browser_path_tuple[0].split('\"')[1]\n\n                    return browser, path\n                except ImportError:\n                    pass\n                except Exception as e:\n                    print(\n                        \"Failed to look up default browser in system registry: \",  # noqa: E501\n                        e,\n                    )\n\n            case \"linux\":\n                try:\n                    import gc\n                    import webbrowser\n\n                    browser_instance = webbrowser.get()\n                    browser = browser_instance.basename\n                    browser_instance = (\n                        None  # Manually free to avoid calling GC\n                    )\n                    del browser_instance\n                    gc.collect()\n                    print(f\"browser: {browser}\")\n\n                    return browser, None\n                except ImportError as e:\n                    print(\"Unable to import webbrowser library: \", str(e))\n\n            case _:\n                raise OsNotFoundException(\n                    f\"Your OS {os_platform} is not yet implement.\"\n                )\n</code></pre>"},{"location":"browser/browser/#speed_sleuth.browser.BrowserFactory.detect_default_browser","title":"<code>detect_default_browser()</code>  <code>staticmethod</code>","text":"<p>Detects the user's default web browser and its executable path.</p> <p>This method attempts to identify the default browser set on the user's system. It utilizes the platform module to determine the operating system and then uses OS-specific methods to find the default browser and its path. For Windows, it accesses the system registry.</p> <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[str, str]</code> <p>A tuple containing the identifier of the default browser and its executable path.</p> <p>Raises:</p> Type Description <code>OsNotFoundException</code> <p>If the operating system is not recognized or supported by this method.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>@staticmethod\ndef detect_default_browser() -&gt; tuple[str, str]:\n    \"\"\"Detects the user's default web browser and its executable path.\n\n    This method attempts to identify the default browser set on the\n    user's system. It utilizes the platform module to determine the\n    operating system and then uses OS-specific methods to find the\n    default browser and its path. For Windows, it accesses the\n    system registry.\n\n    Returns:\n        tuple: A tuple containing the identifier of the default browser and\n            its executable path.\n\n    Raises:\n        OsNotFoundException: If the operating system is not recognized or\n            supported by this method.\n\n    \"\"\"\n    # selenium is able to cope without.\n    os_platform = platform.system().lower()\n\n    match os_platform:\n        case \"windows\":  # TODO FIX THIS MESS and use webbrowser\n            browser = \"\"\n            path = None\n            try:\n                from winreg import (\n                    HKEY_CLASSES_ROOT,\n                    HKEY_CURRENT_USER,\n                    OpenKey,\n                    QueryValueEx,\n                )\n\n                reg_key = OpenKey(\n                    HKEY_CURRENT_USER,\n                    r\"SOFTWARE\\Microsoft\\Windows\\Shell\\Associations\\UrlAssociations\\http\\UserChoice\",  # noqa: E501\n                )\n                browser = QueryValueEx(reg_key, \"ProgId\")[0]\n\n                reg_key = OpenKey(\n                    HKEY_CLASSES_ROOT,\n                    r\"{}\\shell\\open\\command\".format(browser),\n                )\n                browser_path_tuple = QueryValueEx(reg_key, None)\n                path = browser_path_tuple[0].split('\"')[1]\n\n                return browser, path\n            except ImportError:\n                pass\n            except Exception as e:\n                print(\n                    \"Failed to look up default browser in system registry: \",  # noqa: E501\n                    e,\n                )\n\n        case \"linux\":\n            try:\n                import gc\n                import webbrowser\n\n                browser_instance = webbrowser.get()\n                browser = browser_instance.basename\n                browser_instance = (\n                    None  # Manually free to avoid calling GC\n                )\n                del browser_instance\n                gc.collect()\n                print(f\"browser: {browser}\")\n\n                return browser, None\n            except ImportError as e:\n                print(\"Unable to import webbrowser library: \", str(e))\n\n        case _:\n            raise OsNotFoundException(\n                f\"Your OS {os_platform} is not yet implement.\"\n            )\n</code></pre>"},{"location":"browser/browser/#speed_sleuth.browser.BrowserFactory.get_browser","title":"<code>get_browser()</code>  <code>staticmethod</code>","text":"<p>Retrieves an instance of a browser object based on the user's default browser.</p> <p>The method first detects the default browser and its executable path by calling the <code>detect_default_browser</code> static method. Depending on the detected browser, it then dynamically imports and returns an instance of the corresponding browser class.</p> <p>Returns:</p> Name Type Description <code>browser</code> <code>BrowserInterface</code> <p>An instance of a browser object corresponding to the user's default browser and conforming to BrowserInterface.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the detected default browser is not supported by the factory.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>@staticmethod\ndef get_browser() -&gt; BrowserInterface:\n    \"\"\"Retrieves an instance of a browser object based on the user's\n    default browser.\n\n    The method first detects the default browser and its executable\n    path by calling the `detect_default_browser` static method.\n    Depending on the detected browser, it then dynamically imports\n    and returns an instance of the corresponding browser class.\n\n    Returns:\n        browser: An instance of a browser object corresponding to\n            the user's default browser and conforming to BrowserInterface.\n\n    Raises:\n        ValueError: If the detected default browser is not supported by the\n            factory.\n\n    \"\"\"\n    default_browser, path = BrowserFactory.detect_default_browser()\n\n    match default_browser:\n        case \"MSEdgeHTM\":\n            from speed_sleuth.browser.ms_edge import MSEdgeBrowser\n\n            return MSEdgeBrowser(path)\n        case \"google-chrome\":\n            from speed_sleuth.browser.chromium import ChromiumBrowser\n\n            return ChromiumBrowser(path)\n        case _:\n            raise ValueError(\n                f\"No supported browser found for {default_browser}\"\n            )\n</code></pre>"},{"location":"browser/browser/#speed_sleuth.browser.BrowserInterface","title":"<code>BrowserInterface</code>","text":"<p>BrowserInterface is a generic interface each browser subclass will need to implement in order to correctly configure the selenium webdriver.</p> <p>This interface ensures that all subclasses provide a specific method to load and configure a Selenium WebDriver instance appropriate for the browser they represent.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>class BrowserInterface(metaclass=abc.ABCMeta):\n    \"\"\"BrowserInterface is a generic interface each browser subclass will need\n    to implement in order to correctly configure the selenium webdriver.\n\n    This interface ensures that all subclasses provide a specific method\n    to load and configure a Selenium WebDriver instance appropriate for\n    the browser they represent.\n\n    \"\"\"\n\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return hasattr(subclass, \"load_driver\") and callable(\n            subclass.load_driver\n        )\n\n    @classmethod\n    @abc.abstractmethod\n    def load_driver(cls) -&gt; WebDriver:\n        \"\"\"Loads and returns a configured instance of Selenium WebDriver\n        specific to the browser.\n\n        This method must be implemented by subclasses to provide a\n        ready-to-use WebDriver instance that is appropriately configured\n        for the browser the subclass represents. The configuration may\n        include setting browser options, capabilities, and webdriver\n        paths.\n\n        Returns:\n            WebDriver: An instance of a Selenium WebDriver ready for browser\n                automation tasks.\n\n        \"\"\"\n        pass\n</code></pre>"},{"location":"browser/browser/#speed_sleuth.browser.BrowserInterface.load_driver","title":"<code>load_driver()</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Loads and returns a configured instance of Selenium WebDriver specific to the browser.</p> <p>This method must be implemented by subclasses to provide a ready-to-use WebDriver instance that is appropriately configured for the browser the subclass represents. The configuration may include setting browser options, capabilities, and webdriver paths.</p> <p>Returns:</p> Name Type Description <code>WebDriver</code> <code>WebDriver</code> <p>An instance of a Selenium WebDriver ready for browser automation tasks.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef load_driver(cls) -&gt; WebDriver:\n    \"\"\"Loads and returns a configured instance of Selenium WebDriver\n    specific to the browser.\n\n    This method must be implemented by subclasses to provide a\n    ready-to-use WebDriver instance that is appropriately configured\n    for the browser the subclass represents. The configuration may\n    include setting browser options, capabilities, and webdriver\n    paths.\n\n    Returns:\n        WebDriver: An instance of a Selenium WebDriver ready for browser\n            automation tasks.\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"browser/browser/#speed_sleuth.browser.OsNotFoundException","title":"<code>OsNotFoundException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when OS cannot be detected.</p> Source code in <code>src/speed_sleuth/browser/__init__.py</code> <pre><code>class OsNotFoundException(Exception):\n    \"\"\"Raised when OS cannot be detected.\"\"\"\n</code></pre>"},{"location":"browser/chromium/","title":"Chromium","text":"<p>This module defines the ChromiumBrower class, which is an implementation of the BrowserInterface for creating and configuring a Selenium WebDriver specific to Chromium- based browsers. Currently, the implementation focuses on Google Chrome, with the intention to extend support to other Chromium-based browsers in the future.</p> <p>Key Components: - BrowserInterface: An abstract base class that defines a generic interface for browser subclasses. - ChromiumBrower: A concrete class that implements the BrowserInterface for the Chrome browser, providing a method to load and configure a Selenium WebDriver with Chromium-specific options.</p>"},{"location":"browser/chromium/#speed_sleuth.browser.chromium.ChromiumBrowser","title":"<code>ChromiumBrowser</code>","text":"<p>ChromiumBrower implements the BrowserInterface to provide a method for loading and configuring a WebDriver instance specifically for Chromium browsers.</p> <p>This class currently supports Chrome browser, with plans to extend support to other Chromium-based browsers. It demonstrates how to set up a Selenium WebDriver with specific options tailored for a Chromium browser instance, including setting the binary location, window size, and disabling GPU acceleration.</p> <p>Attributes:</p> Name Type Description <code>binary_path</code> <code>str</code> <p>An optional location of the webdriver location. Default to None.</p> <code>headless</code> <code>bool</code> <p>Run in headless mode, i.e., without a UI     or display server dependencies</p> <p>Methods:</p> Name Description <code>load_driver</code> <p>Creates and returns a configured Selenium WebDriver instance for the Chromium browser.</p> Source code in <code>src/speed_sleuth/browser/chromium.py</code> <pre><code>@BrowserInterface.register\nclass ChromiumBrowser:\n    \"\"\"ChromiumBrower implements the BrowserInterface to provide a method for\n    loading and configuring a WebDriver instance specifically for Chromium\n    browsers.\n\n    This class currently supports Chrome browser, with plans to extend\n    support to other Chromium-based browsers. It demonstrates how to set\n    up a Selenium WebDriver with specific options tailored for a\n    Chromium browser instance, including setting the binary location,\n    window size, and disabling GPU acceleration.\n\n    Attributes:\n        binary_path (str, optional): An optional location of the webdriver\n            location. Default to None.\n        headless (bool, optional): Run in headless mode, i.e., without a UI\n                or display server dependencies\n\n    Methods:\n        load_driver(): Creates and returns a configured Selenium WebDriver\n            instance for the Chromium browser.\n\n    \"\"\"\n\n    def __init__(self, binary_path=None, headless=False):\n        self.binary_path = binary_path\n        self.headless = headless\n\n    def load_driver(self) -&gt; WebDriver:\n        \"\"\"Initializes and returns a Selenium WebDriver instance configured for\n        the Chrome browser.\n\n        This method sets up a ChromiumService and configures ChromiumOptions\n        to specify the binary location of the Chrome browser, set the window\n        size, disable GPU acceleration, and set the browser language. These\n        options ensure that the WebDriver instance is ready for web automation\n        tasks with Chrome.\n\n        Note: While this implementation currently supports Chromium, there is a\n        plan to expand support to other browsers.\n\n        Returns:\n            WebDriver: A configured instance of Selenium WebDriver for the\n            Chromium browser.\n\n        Example:\n            Initiate a chromium browser ready for testing:\n            ```pycon\n            &gt;&gt;&gt; from speed_sleuth.browser.chromium import ChromiumBrower\n            &gt;&gt;&gt; chromium_browser = ChromiumBrower()\n            &gt;&gt;&gt; driver = chromium_browser.load_driver()\n            &gt;&gt;&gt; driver # doctest: +ELLIPSIS\n            &lt;selenium.webdriver.chrome.webdriver.WebDriver (...)&gt;\n            &gt;&gt;&gt;\n            ```\n\n        \"\"\"\n        chrome_service = service.ChromiumService()\n        chrome_options = options.ChromiumOptions()\n        if self.binary_path:\n            chrome_options.binary_location = self.binary_path\n        if self.headless:\n            chrome_options.add_argument(\"--headless\")\n        chrome_options.add_argument(\"--window-size=1400x900\")\n        chrome_options.add_argument(\"--disable-gpu\")\n        chrome_options.add_argument(\"--lang=en_US\")\n        return webdriver.Chrome(service=chrome_service, options=chrome_options)\n</code></pre>"},{"location":"browser/chromium/#speed_sleuth.browser.chromium.ChromiumBrowser.load_driver","title":"<code>load_driver()</code>","text":"<p>Initializes and returns a Selenium WebDriver instance configured for the Chrome browser.</p> <p>This method sets up a ChromiumService and configures ChromiumOptions to specify the binary location of the Chrome browser, set the window size, disable GPU acceleration, and set the browser language. These options ensure that the WebDriver instance is ready for web automation tasks with Chrome.</p> <p>Note: While this implementation currently supports Chromium, there is a plan to expand support to other browsers.</p> <p>Returns:</p> Name Type Description <code>WebDriver</code> <code>WebDriver</code> <p>A configured instance of Selenium WebDriver for the</p> <code>WebDriver</code> <p>Chromium browser.</p> Example <p>Initiate a chromium browser ready for testing:</p> <pre><code>&gt;&gt;&gt; from speed_sleuth.browser.chromium import ChromiumBrower\n&gt;&gt;&gt; chromium_browser = ChromiumBrower()\n&gt;&gt;&gt; driver = chromium_browser.load_driver()\n&gt;&gt;&gt; driver # doctest: +ELLIPSIS\n&lt;selenium.webdriver.chrome.webdriver.WebDriver (...)&gt;\n&gt;&gt;&gt;\n</code></pre> Source code in <code>src/speed_sleuth/browser/chromium.py</code> <pre><code>def load_driver(self) -&gt; WebDriver:\n    \"\"\"Initializes and returns a Selenium WebDriver instance configured for\n    the Chrome browser.\n\n    This method sets up a ChromiumService and configures ChromiumOptions\n    to specify the binary location of the Chrome browser, set the window\n    size, disable GPU acceleration, and set the browser language. These\n    options ensure that the WebDriver instance is ready for web automation\n    tasks with Chrome.\n\n    Note: While this implementation currently supports Chromium, there is a\n    plan to expand support to other browsers.\n\n    Returns:\n        WebDriver: A configured instance of Selenium WebDriver for the\n        Chromium browser.\n\n    Example:\n        Initiate a chromium browser ready for testing:\n        ```pycon\n        &gt;&gt;&gt; from speed_sleuth.browser.chromium import ChromiumBrower\n        &gt;&gt;&gt; chromium_browser = ChromiumBrower()\n        &gt;&gt;&gt; driver = chromium_browser.load_driver()\n        &gt;&gt;&gt; driver # doctest: +ELLIPSIS\n        &lt;selenium.webdriver.chrome.webdriver.WebDriver (...)&gt;\n        &gt;&gt;&gt;\n        ```\n\n    \"\"\"\n    chrome_service = service.ChromiumService()\n    chrome_options = options.ChromiumOptions()\n    if self.binary_path:\n        chrome_options.binary_location = self.binary_path\n    if self.headless:\n        chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--window-size=1400x900\")\n    chrome_options.add_argument(\"--disable-gpu\")\n    chrome_options.add_argument(\"--lang=en_US\")\n    return webdriver.Chrome(service=chrome_service, options=chrome_options)\n</code></pre>"},{"location":"browser/ms_edge/","title":"Microsoft Edge","text":""},{"location":"browser/ms_edge/#speed_sleuth.browser.ms_edge.MSEdgeBrowser","title":"<code>MSEdgeBrowser</code>","text":"<p>A class that provides an interface for interacting with the Microsoft Edge browser using Selenium WebDriver. It adheres to the BrowserInterface to ensure compatibility with the Speed Sleuth's browser handling.</p> <p>Attributes:</p> Name Type Description <code>binary_path</code> <code>str</code> <p>The file path to the Microsoft Edge browser executable.</p> <code>headless</code> <code>bool</code> <p>Run in headless mode, i.e., without a UI     or display server dependencies</p> <p>Methods:</p> Name Description <code>load_driver</code> <p>Creates and returns a configured Selenium WebDriver instance for the Chromium browser.</p> Source code in <code>src/speed_sleuth/browser/ms_edge.py</code> <pre><code>@BrowserInterface.register\nclass MSEdgeBrowser:\n    \"\"\"A class that provides an interface for interacting with the Microsoft\n    Edge browser using Selenium WebDriver. It adheres to the BrowserInterface\n    to ensure compatibility with the Speed Sleuth's browser handling.\n\n    Attributes:\n        binary_path (str): The file path to the Microsoft Edge browser\n            executable.\n        headless (bool, optional): Run in headless mode, i.e., without a UI\n                or display server dependencies\n\n    Methods:\n        load_driver(): Creates and returns a configured Selenium WebDriver\n            instance for the Chromium browser.\n\n    \"\"\"\n\n    def __init__(self, binary_path=None, headless=False):\n        self.binary_path = binary_path\n        self.headless = headless\n\n    def load_driver(self) -&gt; WebDriver:\n        \"\"\"Initializes and returns a Selenium WebDriver for Microsoft Edge with\n        specified options.\n\n        The method sets up the driver with a custom binary location for\n        the Edge browser, window size, and language. It disables GPU\n        acceleration to ensure compatibility across different systems.\n        The driver is configured to wait until the page's readyState is\n        'complete' before returning, ensuring that the page is fully\n        loaded.\n\n        Returns:\n            WebDriver: An instance of Selenium WebDriver configured for\n                Microsoft Edge.\n\n        \"\"\"\n\n        edge_service = service.Service()\n        edge_options = options.Options()\n\n        if self.binary_path:\n            edge_options.binary_location = self.binary_path\n        if self.headless:\n            edge_options.add_argument(\"--headless\")\n        edge_options.add_argument(\"--window-size=1400x900\")\n        edge_options.add_argument(\"--disable-gpu\")\n        edge_options.add_argument(\"--lang=en_US\")\n        return webdriver.Edge(service=edge_service, options=edge_options)\n</code></pre>"},{"location":"browser/ms_edge/#speed_sleuth.browser.ms_edge.MSEdgeBrowser.load_driver","title":"<code>load_driver()</code>","text":"<p>Initializes and returns a Selenium WebDriver for Microsoft Edge with specified options.</p> <p>The method sets up the driver with a custom binary location for the Edge browser, window size, and language. It disables GPU acceleration to ensure compatibility across different systems. The driver is configured to wait until the page's readyState is 'complete' before returning, ensuring that the page is fully loaded.</p> <p>Returns:</p> Name Type Description <code>WebDriver</code> <code>WebDriver</code> <p>An instance of Selenium WebDriver configured for Microsoft Edge.</p> Source code in <code>src/speed_sleuth/browser/ms_edge.py</code> <pre><code>def load_driver(self) -&gt; WebDriver:\n    \"\"\"Initializes and returns a Selenium WebDriver for Microsoft Edge with\n    specified options.\n\n    The method sets up the driver with a custom binary location for\n    the Edge browser, window size, and language. It disables GPU\n    acceleration to ensure compatibility across different systems.\n    The driver is configured to wait until the page's readyState is\n    'complete' before returning, ensuring that the page is fully\n    loaded.\n\n    Returns:\n        WebDriver: An instance of Selenium WebDriver configured for\n            Microsoft Edge.\n\n    \"\"\"\n\n    edge_service = service.Service()\n    edge_options = options.Options()\n\n    if self.binary_path:\n        edge_options.binary_location = self.binary_path\n    if self.headless:\n        edge_options.add_argument(\"--headless\")\n    edge_options.add_argument(\"--window-size=1400x900\")\n    edge_options.add_argument(\"--disable-gpu\")\n    edge_options.add_argument(\"--lang=en_US\")\n    return webdriver.Edge(service=edge_service, options=edge_options)\n</code></pre>"},{"location":"provider/provider/","title":"Documentation for the provider module","text":"<p>Generic Provider class which provides an abstraction for the different drivers we would like to use.</p>"},{"location":"provider/provider/#speed_sleuth.provider.Provider","title":"<code>Provider</code>","text":"<p>Each driver will be derive from this Abstract provider class.</p> <p>This class also contains generic methods which needs to be implemented in the concrete provider classes.</p> Source code in <code>src/speed_sleuth/provider/__init__.py</code> <pre><code>class Provider(metaclass=abc.ABCMeta):\n    \"\"\"Each driver will be derive from this Abstract provider class.\n\n    This class also contains generic methods which needs to be\n    implemented in the concrete provider classes.\n\n    \"\"\"\n\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        return (\n            hasattr(subclass, \"run\")\n            and callable(subclass.run)\n            and hasattr(subclass, \"parse_results\")\n            and callable(subclass.parse_results)\n            or NotImplemented\n        )\n\n    @classmethod\n    @abc.abstractmethod\n    def run(cls, filename):\n        \"\"\"Actual method that would trigger the test for the given provider.\"\"\"\n\n    @classmethod\n    @abc.abstractmethod\n    def parse_results(cls):\n        \"\"\"Method that would gather results from the speedtest for the given\n        provider.\"\"\"\n</code></pre>"},{"location":"provider/provider/#speed_sleuth.provider.Provider.parse_results","title":"<code>parse_results()</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Method that would gather results from the speedtest for the given provider.</p> Source code in <code>src/speed_sleuth/provider/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef parse_results(cls):\n    \"\"\"Method that would gather results from the speedtest for the given\n    provider.\"\"\"\n</code></pre>"},{"location":"provider/provider/#speed_sleuth.provider.Provider.run","title":"<code>run(filename)</code>  <code>abstractmethod</code> <code>classmethod</code>","text":"<p>Actual method that would trigger the test for the given provider.</p> Source code in <code>src/speed_sleuth/provider/__init__.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef run(cls, filename):\n    \"\"\"Actual method that would trigger the test for the given provider.\"\"\"\n</code></pre>"},{"location":"provider/speedofme/","title":"Documentation for the speedofme provider","text":"<p>speedof.me concrete implementation of the provider class.</p>"},{"location":"provider/speedofme/#speed_sleuth.provider.speedofme.Speedofme","title":"<code>Speedofme</code>","text":"<p>Represents the Speedof.me service for conducting internet speed tests. This class provides methods to interact with the Speedof.me website using a Selenium WebDriver, including accepting the end-user license agreement (EULA), initiating a speed test, and capturing the results as a screenshot.</p> <p>The class is designed to work with a browser instance that complies with the BrowserInterface, allowing for flexibility in browser choice.</p> <p>Attributes:</p> Name Type Description <code>driver</code> <p>A driver instance that adheres to the DriverInterface, used for web interactions with the browser.</p> Source code in <code>src/speed_sleuth/provider/speedofme.py</code> <pre><code>@Provider.register\nclass Speedofme:\n    \"\"\"Represents the Speedof.me service for conducting internet speed tests.\n    This class provides methods to interact with the Speedof.me website using a\n    Selenium WebDriver, including accepting the end-user license agreement\n    (EULA), initiating a speed test, and capturing the results as a screenshot.\n\n    The class is designed to work with a browser instance that complies\n    with the BrowserInterface, allowing for flexibility in browser\n    choice.\n\n    Attributes:\n        driver: A driver instance that adheres to the DriverInterface, used\n            for web interactions with the browser.\n\n    \"\"\"\n\n    def __init__(self, driver: DriverInterface):\n        \"\"\"Initializes the Speedofme provider with the specified browser.\n\n        Parameters:\n            driver: A driver instance that adheres to the DriverInterface, used\n                for web interactions with the browser.\n\n        \"\"\"\n        driver.get(\"https://speedof.me/\")\n        self.driver = driver\n\n    def setup(self):\n        \"\"\"Prepares the testing environment on the Speedof.me website.\n\n        This involves accepting the End User License Agreement (EULA) if\n        it is presented. Failure to find the EULA acceptance button is\n        handled gracefully and logged.\n\n        \"\"\"\n        try:\n            eula_btn = self.driver.find_element(\n                By.CSS_SELECTOR, \"#cc-accept-btn &gt; a\"\n            )\n            self.driver.wait_to_be_visible(eula_btn)\n\n            print(\"Found eula accept btn\")\n            eula_btn.click()\n        except NoSuchElementException as e:\n            print(\"element not found: \", e)\n\n    def run(self, filename: str = \"speedofme-results.png\"):\n        \"\"\"Initiates the speed test on Speedof.me and captures the results. The\n        test results are saved as a screenshot in the specified file.\n\n        Parameters:\n            filename: The name of the file to save the screenshot of the test\n                results. Defaults to 'speedofme-results.png'.\n\n        This method handles the full lifecycle of the speed test,\n        including setup, starting the test, waiting for the test to\n        complete, and capturing the results.\n\n        \"\"\"\n        code = 0\n        try:\n            self.setup()\n            self.driver.find_element(\n                By.CSS_SELECTOR, \"button#start_test_btn\"\n            ).click()\n            print(\"[+] running speedof.me, please wait\")\n            retry_btn = self.driver.find_element(\n                By.CSS_SELECTOR, \"div.result-retry.result-color\"\n            )\n            self.driver.wait_to_be_visible(retry_btn)\n            print(\"[+] done, taking snapshot of the website results\")\n            results = self.driver.find_element(\n                By.CSS_SELECTOR, \"#d3_pane &gt; svg.download_svg\"\n            )\n            if results:\n                results.screenshot(filename)\n        except Exception as exp:\n            print(f\"An error occurred: {exp}\")\n            traceback.print_exc()\n            code = -1\n        finally:\n            self.driver.cleanup(code)\n\n    def parse_results(self):\n        \"\"\"Parses the results of the speed test. This method is intended to be\n        implemented in the future to provide functionality for extracting and\n        interpreting the test results from the screenshot or the webpage\n        directly.\n\n        Currently, this method is a placeholder and does not perform any\n        actions.\n\n        \"\"\"\n</code></pre>"},{"location":"provider/speedofme/#speed_sleuth.provider.speedofme.Speedofme.__init__","title":"<code>__init__(driver)</code>","text":"<p>Initializes the Speedofme provider with the specified browser.</p> <p>Parameters:</p> Name Type Description Default <code>driver</code> <code>DriverInterface</code> <p>A driver instance that adheres to the DriverInterface, used for web interactions with the browser.</p> required Source code in <code>src/speed_sleuth/provider/speedofme.py</code> <pre><code>def __init__(self, driver: DriverInterface):\n    \"\"\"Initializes the Speedofme provider with the specified browser.\n\n    Parameters:\n        driver: A driver instance that adheres to the DriverInterface, used\n            for web interactions with the browser.\n\n    \"\"\"\n    driver.get(\"https://speedof.me/\")\n    self.driver = driver\n</code></pre>"},{"location":"provider/speedofme/#speed_sleuth.provider.speedofme.Speedofme.parse_results","title":"<code>parse_results()</code>","text":"<p>Parses the results of the speed test. This method is intended to be implemented in the future to provide functionality for extracting and interpreting the test results from the screenshot or the webpage directly.</p> <p>Currently, this method is a placeholder and does not perform any actions.</p> Source code in <code>src/speed_sleuth/provider/speedofme.py</code> <pre><code>def parse_results(self):\n    \"\"\"Parses the results of the speed test. This method is intended to be\n    implemented in the future to provide functionality for extracting and\n    interpreting the test results from the screenshot or the webpage\n    directly.\n\n    Currently, this method is a placeholder and does not perform any\n    actions.\n\n    \"\"\"\n</code></pre>"},{"location":"provider/speedofme/#speed_sleuth.provider.speedofme.Speedofme.run","title":"<code>run(filename='speedofme-results.png')</code>","text":"<p>Initiates the speed test on Speedof.me and captures the results. The test results are saved as a screenshot in the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to save the screenshot of the test results. Defaults to 'speedofme-results.png'.</p> <code>'speedofme-results.png'</code> <p>This method handles the full lifecycle of the speed test, including setup, starting the test, waiting for the test to complete, and capturing the results.</p> Source code in <code>src/speed_sleuth/provider/speedofme.py</code> <pre><code>def run(self, filename: str = \"speedofme-results.png\"):\n    \"\"\"Initiates the speed test on Speedof.me and captures the results. The\n    test results are saved as a screenshot in the specified file.\n\n    Parameters:\n        filename: The name of the file to save the screenshot of the test\n            results. Defaults to 'speedofme-results.png'.\n\n    This method handles the full lifecycle of the speed test,\n    including setup, starting the test, waiting for the test to\n    complete, and capturing the results.\n\n    \"\"\"\n    code = 0\n    try:\n        self.setup()\n        self.driver.find_element(\n            By.CSS_SELECTOR, \"button#start_test_btn\"\n        ).click()\n        print(\"[+] running speedof.me, please wait\")\n        retry_btn = self.driver.find_element(\n            By.CSS_SELECTOR, \"div.result-retry.result-color\"\n        )\n        self.driver.wait_to_be_visible(retry_btn)\n        print(\"[+] done, taking snapshot of the website results\")\n        results = self.driver.find_element(\n            By.CSS_SELECTOR, \"#d3_pane &gt; svg.download_svg\"\n        )\n        if results:\n            results.screenshot(filename)\n    except Exception as exp:\n        print(f\"An error occurred: {exp}\")\n        traceback.print_exc()\n        code = -1\n    finally:\n        self.driver.cleanup(code)\n</code></pre>"},{"location":"provider/speedofme/#speed_sleuth.provider.speedofme.Speedofme.setup","title":"<code>setup()</code>","text":"<p>Prepares the testing environment on the Speedof.me website.</p> <p>This involves accepting the End User License Agreement (EULA) if it is presented. Failure to find the EULA acceptance button is handled gracefully and logged.</p> Source code in <code>src/speed_sleuth/provider/speedofme.py</code> <pre><code>def setup(self):\n    \"\"\"Prepares the testing environment on the Speedof.me website.\n\n    This involves accepting the End User License Agreement (EULA) if\n    it is presented. Failure to find the EULA acceptance button is\n    handled gracefully and logged.\n\n    \"\"\"\n    try:\n        eula_btn = self.driver.find_element(\n            By.CSS_SELECTOR, \"#cc-accept-btn &gt; a\"\n        )\n        self.driver.wait_to_be_visible(eula_btn)\n\n        print(\"Found eula accept btn\")\n        eula_btn.click()\n    except NoSuchElementException as e:\n        print(\"element not found: \", e)\n</code></pre>"},{"location":"provider/speedtest/","title":"Documentation for the Speedtest provider","text":"<p>Module for interfacing with speedtest.net for internet speed tests using Selenium.</p> <p>This module contains the Speedtest class, which inherits from a generic Provider class and implements methods to configure, run, and capture results of internet speed tests from speedtest.net. The class manages browser interactions, including dismissing notifications and accepting necessary agreements, to ensure the test runs smoothly.</p> <p>Dependencies:     - traceback: For error logging and debugging.     - selenium: For automating web browser interaction.</p>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest","title":"<code>Speedtest</code>","text":"<p>A provider class for conducting internet speed tests using the speedtest.net website.</p> <p>The Speedtest class extends the Provider base class, encapsulating methods specific to navigating and interacting with speedtest.net. This includes accepting privacy policies, dismissing advertisements or notifications, initiating the speed test, and capturing the results as screenshots.</p> <p>Attributes:</p> Name Type Description <code>driver</code> <p>A driver instance that adheres to the DriverInterface, used for web interactions with the browser.</p> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>@Provider.register\nclass Speedtest:\n    \"\"\"A provider class for conducting internet speed tests using the\n    speedtest.net website.\n\n    The Speedtest class extends the Provider base class, encapsulating\n    methods specific to navigating and interacting with speedtest.net.\n    This includes accepting privacy policies, dismissing advertisements\n    or notifications, initiating the speed test, and capturing the\n    results as screenshots.\n\n    Attributes:\n        driver: A driver instance that adheres to the DriverInterface, used\n            for web interactions with the browser.\n\n    \"\"\"\n\n    def __init__(self, driver: DriverInterface):\n        \"\"\"Initializes the Speedtest provider with a browser instance.\n\n        Parameters:\n            driver: A driver instance that adheres to the DriverInterface, used\n                for web interactions with the browser.\n\n        \"\"\"\n        driver.get(\"https://www.speedtest.net/\")\n        self.driver = driver\n\n    def __str__(self) -&gt; str:\n        \"\"\"Provides a string representation of the Speedtest instance.\n\n        Returns:\n            str: A simple string representation for this provider.\n\n        \"\"\"\n        return \"speedtest\"\n\n    def setup(self):\n        \"\"\"Prepares the speedtest.net environment for testing.\n\n        This method attempts to dismiss the cookie/license agreement\n        modal and any other initial pop-ups to ensure the test page is\n        ready for interaction.\n\n        \"\"\"\n        try:\n            eula_reject_btn = self.driver.wait_for_element(\n                (By.CSS_SELECTOR, \"button#onetrust-reject-all-handler\"),\n                timeout=5,\n            )\n\n            if eula_reject_btn:\n                eula_reject_btn.click()\n        except NoSuchElementException:\n            # onetrust-accept-btn-handler\n            eula_accept_btn = self.driver.wait_for_element(\n                (By.CSS_SELECTOR, \"button#onetrust-accept-btn-handler\"),\n                timeout=5,\n            )\n\n            if eula_accept_btn:\n                eula_accept_btn.click()\n        except Exception:\n            pass\n\n    def dismiss_notification(self):\n        \"\"\"Dismisses notifications or banners that may interfere with the test.\n\n        This method ensures that no overlay elements prevent interaction\n        with the test start button or the results.\n\n        \"\"\"\n        try:\n            dismiss_btn = self.driver.wait_for_element(\n                (By.CSS_SELECTOR, \"a.notification-dismiss\")\n            )\n            if dismiss_btn:\n                print(\"dismissing notification...\")\n                dismiss_btn.click()\n        except NoSuchElementException:\n            pass  # Silently ignore this exception which can occur.\n\n    def run(self, filename: str = \"speedtest-result.png\"):\n        \"\"\"Executes the speed test on speedtest.net and captures a screenshot\n        of the results.\n\n        This method orchestrates the test execution, from setup to\n        result capture, handling possible UI elements and exceptions\n        along the way.\n\n        Parameters:\n            filename: The file path where the result screenshot will be saved.\n                Defaults to 'speedtest-result.png'.\n\n        \"\"\"\n        code = 0\n        try:\n            self.setup()\n            self.dismiss_notification()\n            start_test_btn = self.driver.wait_for_button_clickable(\n                (By.CSS_SELECTOR, \"#container div.start-button &gt; a\"), timeout=5\n            )\n            start_test_btn.click()\n            print(\"[+] running speedtest.net, please wait\")\n            # Block until the result is displayed on screen.\n            results = self.driver.wait_for_element(\n                (\n                    By.CSS_SELECTOR,\n                    \"div.result-container-speed.result-container-speed-active\",\n                )\n            )\n            print(\"[+] done, taking snapshot of the website results\")\n            # self.dismiss_notification()\n            if results:\n                results.screenshot(filename)\n            # Dismiss speedtest modal.\n        except ElementNotInteractableException as e:\n            print(\"Did not find element: \", e)\n            code = -1\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            traceback.print_exc()\n            code = -1\n        finally:\n            self.driver.cleanup(code)\n\n    def parse_results(self):\n        \"\"\"Parses the captured results of the speed test.\n\n        This method is intended for future implementation, where results\n        obtained from the screenshot or directly from the page will be\n        extracted and structured for further processing or analysis.\n\n        Currently, this method does not perform any actions.\n\n        \"\"\"\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.__init__","title":"<code>__init__(driver)</code>","text":"<p>Initializes the Speedtest provider with a browser instance.</p> <p>Parameters:</p> Name Type Description Default <code>driver</code> <code>DriverInterface</code> <p>A driver instance that adheres to the DriverInterface, used for web interactions with the browser.</p> required Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def __init__(self, driver: DriverInterface):\n    \"\"\"Initializes the Speedtest provider with a browser instance.\n\n    Parameters:\n        driver: A driver instance that adheres to the DriverInterface, used\n            for web interactions with the browser.\n\n    \"\"\"\n    driver.get(\"https://www.speedtest.net/\")\n    self.driver = driver\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.__str__","title":"<code>__str__()</code>","text":"<p>Provides a string representation of the Speedtest instance.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A simple string representation for this provider.</p> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Provides a string representation of the Speedtest instance.\n\n    Returns:\n        str: A simple string representation for this provider.\n\n    \"\"\"\n    return \"speedtest\"\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.dismiss_notification","title":"<code>dismiss_notification()</code>","text":"<p>Dismisses notifications or banners that may interfere with the test.</p> <p>This method ensures that no overlay elements prevent interaction with the test start button or the results.</p> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def dismiss_notification(self):\n    \"\"\"Dismisses notifications or banners that may interfere with the test.\n\n    This method ensures that no overlay elements prevent interaction\n    with the test start button or the results.\n\n    \"\"\"\n    try:\n        dismiss_btn = self.driver.wait_for_element(\n            (By.CSS_SELECTOR, \"a.notification-dismiss\")\n        )\n        if dismiss_btn:\n            print(\"dismissing notification...\")\n            dismiss_btn.click()\n    except NoSuchElementException:\n        pass  # Silently ignore this exception which can occur.\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.parse_results","title":"<code>parse_results()</code>","text":"<p>Parses the captured results of the speed test.</p> <p>This method is intended for future implementation, where results obtained from the screenshot or directly from the page will be extracted and structured for further processing or analysis.</p> <p>Currently, this method does not perform any actions.</p> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def parse_results(self):\n    \"\"\"Parses the captured results of the speed test.\n\n    This method is intended for future implementation, where results\n    obtained from the screenshot or directly from the page will be\n    extracted and structured for further processing or analysis.\n\n    Currently, this method does not perform any actions.\n\n    \"\"\"\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.run","title":"<code>run(filename='speedtest-result.png')</code>","text":"<p>Executes the speed test on speedtest.net and captures a screenshot of the results.</p> <p>This method orchestrates the test execution, from setup to result capture, handling possible UI elements and exceptions along the way.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The file path where the result screenshot will be saved. Defaults to 'speedtest-result.png'.</p> <code>'speedtest-result.png'</code> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def run(self, filename: str = \"speedtest-result.png\"):\n    \"\"\"Executes the speed test on speedtest.net and captures a screenshot\n    of the results.\n\n    This method orchestrates the test execution, from setup to\n    result capture, handling possible UI elements and exceptions\n    along the way.\n\n    Parameters:\n        filename: The file path where the result screenshot will be saved.\n            Defaults to 'speedtest-result.png'.\n\n    \"\"\"\n    code = 0\n    try:\n        self.setup()\n        self.dismiss_notification()\n        start_test_btn = self.driver.wait_for_button_clickable(\n            (By.CSS_SELECTOR, \"#container div.start-button &gt; a\"), timeout=5\n        )\n        start_test_btn.click()\n        print(\"[+] running speedtest.net, please wait\")\n        # Block until the result is displayed on screen.\n        results = self.driver.wait_for_element(\n            (\n                By.CSS_SELECTOR,\n                \"div.result-container-speed.result-container-speed-active\",\n            )\n        )\n        print(\"[+] done, taking snapshot of the website results\")\n        # self.dismiss_notification()\n        if results:\n            results.screenshot(filename)\n        # Dismiss speedtest modal.\n    except ElementNotInteractableException as e:\n        print(\"Did not find element: \", e)\n        code = -1\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        traceback.print_exc()\n        code = -1\n    finally:\n        self.driver.cleanup(code)\n</code></pre>"},{"location":"provider/speedtest/#speed_sleuth.provider.speedtest.Speedtest.setup","title":"<code>setup()</code>","text":"<p>Prepares the speedtest.net environment for testing.</p> <p>This method attempts to dismiss the cookie/license agreement modal and any other initial pop-ups to ensure the test page is ready for interaction.</p> Source code in <code>src/speed_sleuth/provider/speedtest.py</code> <pre><code>def setup(self):\n    \"\"\"Prepares the speedtest.net environment for testing.\n\n    This method attempts to dismiss the cookie/license agreement\n    modal and any other initial pop-ups to ensure the test page is\n    ready for interaction.\n\n    \"\"\"\n    try:\n        eula_reject_btn = self.driver.wait_for_element(\n            (By.CSS_SELECTOR, \"button#onetrust-reject-all-handler\"),\n            timeout=5,\n        )\n\n        if eula_reject_btn:\n            eula_reject_btn.click()\n    except NoSuchElementException:\n        # onetrust-accept-btn-handler\n        eula_accept_btn = self.driver.wait_for_element(\n            (By.CSS_SELECTOR, \"button#onetrust-accept-btn-handler\"),\n            timeout=5,\n        )\n\n        if eula_accept_btn:\n            eula_accept_btn.click()\n    except Exception:\n        pass\n</code></pre>"}]}